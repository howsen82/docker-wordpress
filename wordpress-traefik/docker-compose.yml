# WordPress with Let's Encrypt Using Docker Compose

# Change variables in the `.env` to meet your requirements.
# Note that the `.env` file should be in the same directory as `docker-compose.yml`.

# Create networks for your services before deploying the configuration using the commands
# docker network create traefik-network
# docker network create wordpress-network

# Deploy WordPress using Docker Compose
# docker-compose -p wordpress up -d

# Backups
# The `backups` container in the configuration is responsible for the following:
# 1. **Database Backup**: Creates compressed backups of the MariaDB database using pg_dump.
# Customizable backup path, filename pattern, and schedule through variables like `MARIADB_BACKUPS_PATH`, `MARIADB_BACKUP_NAME`, and `BACKUP_INTERVAL`.
# 2. **Application Data Backup**: Compresses and stores backups of the application data on the same schedule. Controlled via variables such as `DATA_BACKUPS_PATH`, `DATA_BACKUP_NAME`, and `BACKUP_INTERVAL`.
# 3. **Backup Pruning**: Periodically removes backups exceeding a specified age to manage storage.
# Customizable pruning schedule and age threshold with `MARIADB_BACKUP_PRUNE_DAYS` and `DATA_BACKUP_PRUNE_DAYS`.
# By utilizing this container, consistent and automated backups of the essential components of your instance are ensured.
# Moreover, efficient management of backup storage and tailored backup routines can be achieved through easy and flexible configuration using environment variables.

# # wordpress-restore-database.sh Description
# This script facilitates the restoration of a database backup.
# 1. **Identify Containers**: It first identifies the service and backups containers by name, finding the appropriate container IDs.
# 2. **List Backups**: Displays all available database backups located at the specified backup path.
# 3. **Select Backup**: Prompts the user to copy and paste the desired backup name from the list to restore the database.
# 4. **Stop Service**: Temporarily stops the service to ensure data consistency during restoration.
# 5. **Restore Database**: Executes a sequence of commands to drop the current database, create a new one, and restore it from the selected compressed backup file.
# 6. **Start Service**: Restarts the service after the restoration is completed.
# To make the `wordpress-restore-database.shh` script executable, run the following command:
# `chmod +x wordpress-restore-database.sh`
# Usage of this script ensures a controlled and guided process to restore the database from an existing backup.

# # wordpress-restore-application-data.sh Description
# This script is designed to restore the application data.
# 1. **Identify Containers**: Similarly to the database restore script, it identifies the service and backups containers by name.
# 2. **List Application Data Backups**: Displays all available application data backups at the specified backup path.
# 3. **Select Backup**: Asks the user to copy and paste the desired backup name for application data restoration.
# 4. **Stop Service**: Stops the service to prevent any conflicts during the restore process.
# 5. **Restore Application Data**: Removes the current application data and then extracts the selected backup to the appropriate application data path.
# 6. **Start Service**: Restarts the service after the application data has been successfully restored.
# To make the `wordpress-restore-application-data.sh` script executable, run the following command:
# `chmod +x wordpress-restore-application-data.sh`
# By utilizing this script, you can efficiently restore application data from an existing backup while ensuring proper coordination with the running service.

version: '3.9'

services:
  wordpress:
    container_name: wordpress
    image: ${WORDPRESS_IMAGE_TAG}
    environment:
      - WORDPRESS_DATABASE_HOST=mariadb
      - WORDPRESS_DATABASE_PORT_NUMBER=3306
      - WORDPRESS_DATABASE_NAME=${WORDPRESS_DB_NAME}
      - WORDPRESS_DATABASE_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DATABASE_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - WORDPRESS_TABLE_PREFIX=${WORDPRESS_TABLE_PREFIX}
      - WORDPRESS_BLOG_NAME=${WORDPRESS_BLOG_NAME}
      - WORDPRESS_FIRST_NAME=${WORDPRESS_ADMIN_NAME}
      - WORDPRESS_LAST_NAME=${WORDPRESS_ADMIN_LASTNAME}
      - WORDPRESS_USERNAME=${WORDPRESS_ADMIN_USERNAME}
      - WORDPRESS_PASSWORD=${WORDPRESS_ADMIN_PASSWORD}
      - WORDPRESS_EMAIL=${WORDPRESS_ADMIN_EMAIL}
      - WORDPRESS_SMTP_HOST=${WORDPRESS_SMTP_ADDRESS}
      - WORDPRESS_SMTP_PORT=${WORDPRESS_SMTP_PORT}
      - WORDPRESS_SMTP_USER=${WORDPRESS_SMTP_USER_NAME}
      - WORDPRESS_SMTP_PASSWORD=${WORDPRESS_SMTP_PASSWORD}
    volumes:
      - wordpress-data:${DATA_PATH}
    networks:
      - wordpress-network
      - traefik-network
    restart: unless-stopped
    healthcheck:
      test: timeout 10s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 90s
    labels:
      - traefik.enable=true
      - traefik.http.routers.wordpress.rule=Host(`${WORDPRESS_HOSTNAME}`)
      - traefik.http.routers.wordpress.service=wordpress
      - traefik.http.routers.wordpress.entrypoints=websecure
      - traefik.http.services.wordpress.loadbalancer.server.port=8080
      - traefik.http.routers.wordpress.tls=true
      - traefik.http.routers.wordpress.tls.certresolver=letsencrypt
      - traefik.http.services.wordpress.loadbalancer.passhostheader=true
      - traefik.http.routers.wordpress.middlewares=compresstraefik
      - traefik.http.middlewares.compresstraefik.compress=true
      - traefik.docker.network=traefik-network
    depends_on:
      mariadb:
        condition: service_healthy
      traefik:
        condition: service_healthy

  mariadb:
    container_name: mariadb
    image: ${WORDPRESS_MARIADB_IMAGE_TAG}
    volumes:
      - mariadb-data:/var/lib/mysql
    environment:
      - MARIADB_DATABASE=${WORDPRESS_DB_NAME}
      - MARIADB_USER=${WORDPRESS_DB_USER}
      - MARIADB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - MARIADB_ROOT_PASSWORD=${WORDPRESS_DB_ADMIN_PASSWORD}
    networks:
      - wordpress-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 60s

  traefik:
    container_name: traefik
    image: ${TRAEFIK_IMAGE_TAG}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-certificates:/etc/traefik/acme
    networks:
      - traefik-network
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "http://localhost:8082/ping","--spider"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`${TRAEFIK_HOSTNAME}`)
      - traefik.http.routers.dashboard.service=api@internal
      - traefik.http.routers.dashboard.entrypoints=websecure
      - traefik.http.services.dashboard.loadbalancer.server.port=8080
      - traefik.http.routers.dashboard.tls=true
      - traefik.http.routers.dashboard.tls.certresolver=letsencrypt
      - traefik.http.services.dashboard.loadbalancer.passhostheader=true
      - traefik.http.routers.dashboard.middlewares=authtraefik
      - traefik.http.middlewares.authtraefik.basicauth.users=${TRAEFIK_BASIC_AUTH}
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.entrypoints=web
      - traefik.http.routers.http-catchall.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
  
  backup:
    container_name: backup
    image: ${WORDPRESS_MARIADB_IMAGE_TAG}
    environment:
      - WORDPRESS_DB_NAME=${WORDPRESS_DB_NAME}
      - WORDPRESS_DB_USER=${WORDPRESS_DB_USER}
      - WORDPRESS_DB_PASSWORD=${WORDPRESS_DB_PASSWORD}
      - BACKUP_INIT_SLEEP=${BACKUP_INIT_SLEEP}
      - BACKUP_INTERVAL=${BACKUP_INTERVAL}
      - MARIADB_BACKUP_PRUNE_DAYS=${MARIADB_BACKUP_PRUNE_DAYS}
      - DATA_BACKUP_PRUNE_DAYS=${DATA_BACKUP_PRUNE_DAYS}
      - MARIADB_BACKUPS_PATH=${MARIADB_BACKUPS_PATH}
      - DATA_BACKUPS_PATH=${DATA_BACKUPS_PATH}
      - DATA_PATH=${DATA_PATH}
      - MARIADB_BACKUP_NAME=${MARIADB_BACKUP_NAME}
      - DATA_BACKUP_NAME=${DATA_BACKUP_NAME}
    volumes:
      - wordpress-mariadb-backup:/var/lib/mysql
      - wordpress-data:${DATA_PATH}
      - wordpress-data-backups:${DATA_BACKUPS_PATH}
      - wordpress-database-backups:${MARIADB_BACKUPS_PATH}
    networks:
      - wordpress-network
    restart: unless-stopped
    depends_on:
      mariadb:
        condition: service_healthy

volumes:
  mariadb-data:
  wordpress-data:
  wordpress-mariadb-backup:
  wordpress-data-backups:
  wordpress-database-backups:
  traefik-certificates:

networks:
  wordpress-network:
    external:
      name: wordpress-network
  traefik-network:
    external:
      name: traefik-network